<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!-- 1.配置SecurityManager-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="authenticator" ref="authenticator"/>
        <!-- 一个realm的时候，就用属性<property name="realm" ref="myRealm"/> -->
        <!-- 多个realm的时候， 可以用<property name="realms"></property>-->
        <property name="realms">
            <list>
                <ref bean="myRealm"/>
                <!--  <ref bean="jdbcRealm"/>-->
            </list>
        </property>
    </bean>

    <!-- 2.配置cacheManager,这里我使用的是自带的缓存管理-->
    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/>

    <!-- 3.配置authenticator -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <!-- 可以修改多个realm之间的匹配策略，
        FirstSuccessfulStrategy：只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略；
        默认 AtLeastOneSuccessfulStrategy:只要有一个Realm验证成功即可，和FirstSuccessfulStrategy不同，返回所有Realm身份验证成功的认证信息；
        AllSuccessfulStrategy：所有Realm验证成功才算成功，且返回所有 Realm身份验证成功的认证信息，
        如果有一个失败就失败了。 -->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"/>
        </property>
    </bean>

    <!-- 3.1配置realm -->
    <!--这个MyRealm是我自己定义的，密码的加密方式和加密次数跟这里要对应，不然匹配不起来-->
    <bean id="myRealm" class="com.upoint.shiro.realms.ShiroRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"/><!--加密方式-->
                <property name="hashIterations" value="1024"/><!--加密次数-->
            </bean>
        </property>
    </bean>
    <!--这个Realm，使用的是shiro自带的JdbcRealm,这个Class类,
    自带了很多属性和方法，因为我这里仅仅实现了登录的功能，
    使用仅用到authenticationQuery属性，它是这样定义的:
     protected String authenticationQuery = DEFAULT_AUTHENTICATION_QUERY;
      protected static final String DEFAULT_AUTHENTICATION_QUERY = "select password from users where username = ?";
     -->
    <!--<bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <property name="dataSource" ref="dataSource"/>
        如果你数据库里面的定义的表，跟class自带的查询使用
        到属性不一致的话，你可以自己在这里重新定义select语句，来覆盖 掉自带的select，比如以下:
        <property name="authenticationQuery" value="select password from user where name = ?"></property>-->

    <!-- 4.配置LifecycleBeanPostProcessor,可以自动的来调用配置在Spring IOC容器中shiro bean的生命周期方法 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor">
    </bean>

    <!-- 5.启动呢IOC容器中使用Shiro的注解，但是必须配置在LifecycleBeanPostProcessor之后，才能使用 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- 6. 配置 ShiroFilter.
        6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy
        的 <filter-name> 一致. 若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来
        IOC 容器中查找和 <filter-name> 名字对应的 filter bean. -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <!--这里直接用Controller里面跳转到成功界面，所以没设置参数-->
        <property name="successUrl" value="/"/>
        <property name="unauthorizedUrl" value="/"/>
        <!-- 配置哪些页面需要受保护. 以及访问这些页面需要的权限.
        1). anon(anonymous) 可以被匿名访问 2). authc(authentication)
        必须认证(即登录)后才可能访问的页面. 3). logout 登出.4)等等其他的，没用到 我就不写出来了 -->
        <property name="filterChainDefinitions">
            <value>
                /login.jsp=anon
                /login=anon
                /logout=logout
                #表示其他所有的url都需要认证
                /** = authc
            </value>
        </property>

    </bean>

</beans>